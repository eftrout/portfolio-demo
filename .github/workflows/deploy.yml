#This workflow deploys Terraform code to AWS every time there is a push to the main branch.
# It uses the AWS credentials stored in GitHub Secrets to authenticate and deploy the infrastructure.
name: Deploy Static Website to AWS

on:
  push:
    branches:
      - main #Only run on pushes to the main branch
permissions:
  contents: read #Allow the workflow to read the repository contents
  id-token: write #Allow the workflow to use OIDC for AWS authentication

jobs:
  terraform:
    name: Terraform Apply #Job name shown in GitHub Actions UI
    runs-on: ubuntu-latest #Run on the latest version of Ubuntu provided by GitHub Actions

    steps:
      - name: Checkout code #checkout the repository code from repository
        uses: actions/checkout@v2 #Pulls your repository code so the workflow can access it
      - name: Configure AWS credentials #Configure AWS credentials for the workflow
        uses: aws-actions/configure-aws-credentials@v4 #Sets up AWS credentials via OIDC
        with:
          role-to-assume: arn:aws:iam::521819599837:role/S3CF #IAM role to assume for AWS access
          aws-region: us-east-2 #Specify the AWS region to deploy to
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3 #Sets up Terraform CLI in the GitHub Actions environment
        with:
          terraform_version: 1.7.5 #Specify the version of Terraform to use
      - name: Terraform Init
        run: terraform init #Initializes the workspace and downloads required providers
      - name: Import S3 bucket if not in state
        run: |
          BUCKET_NAME="hello-worldt"
          RESOURCE_NAME="aws_s3_bucket.site_bucket"
          if ! terraform state list | grep -q "$RESOURCE_NAME"; then echo "Importing $BUCKET_NAME into Terraform state..." terraform import $RESOURCE_NAME $BUCKET_NAME || echo "Import skipped"
          else
          echo "Bucket already in state â€” skipping import."
          fi

      - name: Terraform Plan
        run: terraform plan #Shows what Terraform is going to do
      - name: Terraform Apply
        run: terraform apply -auto-approve #Applies the Terraform plan without manual approval
      - name: Invalidate CloudFront Cache
        run: |
          DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)
          echo "Invalidating CloudFront distribution $DISTRIBUTION_ID"
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths /index.html 
        #Invalidates the cache for index.html to ensure the latest version is served
     # - name: "Debug: AWS caller"
     #   run: aws sts get-caller-identity #Debugging step to verify AWS credentials are set up correctly
